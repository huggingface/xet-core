<Wix xmlns="http://wixtoolset.org/schemas/v4/wxs">
  <Package Name="Git-Xet" 
           Manufacturer="Hugging Face" 
           Version="0.1.0" 
           Language="1033"
           UpgradeCode="1aedaf4a-9b02-44e5-be42-ef18ce3b5c28">

    <!-- This tag ensures all installation files are compressed into a single .msi file. -->
    <MediaTemplate EmbedCab="yes" />

    <MajorUpgrade DowngradeErrorMessage="A newer version of [ProductName] is already installed." />

    <!-- Define the directory structure. -->
    <StandardDirectory Id="ProgramFiles64Folder">
      <Directory Id="INSTALLFOLDER" Name="Git-Xet" />
    </StandardDirectory>

    <!-- 
      This is the Feature tree. We have one main feature. 
      It contains the ComponentGroup we define below.
    -->
    <Feature Id="Main" Title="Main Feature" Level="1">
      <ComponentGroupRef Id="AppComponents" />
      <ComponentRef Id="UpdateSystemPath" />
    </Feature>

    <!-- 
      Component Group for our application files.
    -->
    <ComponentGroup Id="AppComponents" Directory="INSTALLFOLDER">
      <Component Id="MyAppExeComponent" Guid="0eaa2c4c-3512-4c0f-975f-7bcd1394f315">
        <File Id="GitXet" Source="git-xet.exe" KeyPath="yes" Checksum="yes" />
      </Component>
    </ComponentGroup>

    <!-- 
      This component modifies the system PATH environment variable.
    -->
    <Component Id="UpdateSystemPath" Directory="INSTALLFOLDER" Guid="74890476-4e17-4f81-891b-e0251380bfcb">
      <!-- 
        - Name='Path': Specifies we're modifying the PATH variable.
        - Action='set': We are setting a value.
        - Value='[INSTALLFOLDER]': The value to add, which is the installation directory.
        - Part='last': Appends our directory to the end of the existing PATH.
        - System='yes': Modifies the system-wide PATH, not just the user's.
      -->
      <Environment Id="PATH" Name="Path" Value="[INSTALLFOLDER]" Part="last" Action="set" System="yes" />
      
      <!-- Every component needs a KeyPath. We create a dummy registry key for this non-file component. -->
      <RegistryValue Root="HKCU" Key="Software\[Manufacturer]\[ProductName]" Name="PathAdded" Type="integer" Value="1" KeyPath="yes" />
    </Component>

    <!--
      Define the Custom Action to run the install command.
      - Execute="immediate": The action will run during normal processing time with user privileges.
      - Return="check": The installer will check the exit code and roll back if it fails.
    -->
    <CustomAction Id="RunInstallCommand"
                  FileRef="GitXet"
                  ExeCommand="install --concurrency 3"
                  Execute="immediate"
                  Return="check" 
                  Impersonate="yes"/>
    
    <!--
      Define the Custom Action to run the uninstall command.
      - Execute="immediate": The action will run during normal processing time with user privileges.
      - Return="check": The installer will check the exit code and roll back if it fails.
    -->
    <CustomAction Id="RunUninstallCommand"
                  FileRef="GitXet"
                  ExeCommand="uninstall --all"
                  Execute="immediate"
                  Return="check" 
                  Impersonate="yes"/>
    
    <!-- 
      Schedule the Custom Action in the installation sequence.
    -->
    <InstallExecuteSequence>
      <!-- 
        - Action="RunInstallCommand": The ID of the Custom Action we defined above.
        - After="InstallFinalize": Schedules the action to run late in the sequence, after all files and registry keys are in place.
        - Condition="NOT Installed": This condition ensures the action only runs during the initial installation, not during an uninstall or repair.
      -->
      <Custom Action="RunInstallCommand" After="InstallFinalize" Condition="NOT Installed"/>

      <!-- 
        - Action="RunUninstallCommand": The ID of the Custom Action we defined above.
        - Before="RemoveFiles": Runs the command before the .exe is deleted from the disk.
        - Condition='REMOVE="ALL" AND NOT UPGRADINGPRODUCTCODE': Ensures this only runs on a clean uninstall, not during an upgrade.
      -->
      <Custom Action="RunUninstallCommand" Before="RemoveFiles" Condition='REMOVE="ALL" AND NOT UPGRADINGPRODUCTCODE' />
    </InstallExecuteSequence>

  </Package>
</Wix>